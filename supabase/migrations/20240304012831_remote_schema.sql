
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";

CREATE SCHEMA IF NOT EXISTS "public";

ALTER SCHEMA "public" OWNER TO "pg_database_owner";

CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";

CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";

CREATE OR REPLACE FUNCTION "public"."handle_new_user"() RETURNS "trigger"
    LANGUAGE "plpgsql" SECURITY DEFINER
    SET "search_path" TO 'public'
    AS $$
begin
  insert into profiles (id, preferred_name, created_at)
  values (new.id, new.raw_user_meta_data ->> 'preferred_name', new.raw_user_meta_data ->> 'created_at');
  return new;
end;
$$;

ALTER FUNCTION "public"."handle_new_user"() OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";

CREATE TABLE IF NOT EXISTS "public"."people" (
    "index" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "first_name" "text" NOT NULL,
    "last_name" "text" NOT NULL,
    "grad_year" smallint,
    "pausd_email" "text" NOT NULL,
    "id" "uuid"
);

ALTER TABLE "public"."people" OWNER TO "postgres";

ALTER TABLE "public"."people" ALTER COLUMN "index" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."people_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."profiles" (
    "index" integer NOT NULL,
    "id" "uuid" NOT NULL,
    "created_at" "text",
    "preferred_name" "text",
    "pfp" "text",
    "current_location" "text",
    "phone_num" integer,
    "bio" "text",
    "social_media" "jsonb",
    "media_links" "jsonb"[]
);

ALTER TABLE "public"."profiles" OWNER TO "postgres";

ALTER TABLE "public"."profiles" ALTER COLUMN "index" ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME "public"."profiles_index_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE OR REPLACE VIEW "public"."select_preview_people" AS
 SELECT "subquery"."first_name",
    "subquery"."last_name",
    "subquery"."id",
    "subquery"."grad_year"
   FROM ( SELECT "people"."first_name",
            "people"."last_name",
            "people"."id",
            "people"."grad_year",
            "row_number"() OVER (PARTITION BY "people"."grad_year" ORDER BY
                CASE
                    WHEN ("people"."id" IS NOT NULL) THEN 0
                    ELSE 1
                END, "people"."id") AS "row_num"
           FROM "public"."people"
          WHERE (("people"."grad_year" >= 1000) AND ("people"."grad_year" <= 3000))) "subquery"
  WHERE ("subquery"."row_num" <= 8);

ALTER TABLE "public"."select_preview_people" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."spotlights" (
    "index" bigint NOT NULL,
    "id" "uuid" NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "updated_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "preferred_name" "text",
    "grad_year" smallint,
    "content" "text",
    "thumbnail" "text",
    "author" "text",
    "description" "text"
);

ALTER TABLE "public"."spotlights" OWNER TO "postgres";

ALTER TABLE "public"."spotlights" ALTER COLUMN "index" ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME "public"."spotlights_index_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

ALTER TABLE ONLY "public"."people"
    ADD CONSTRAINT "people_pkey" PRIMARY KEY ("index");

ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."spotlights"
    ADD CONSTRAINT "spotlights_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."people"
    ADD CONSTRAINT "people_id_fkey" FOREIGN KEY ("id") REFERENCES "public"."profiles"("id") ON DELETE SET NULL;

ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_id_fkey" FOREIGN KEY ("id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."spotlights"
    ADD CONSTRAINT "spotlights_id_fkey" FOREIGN KEY ("id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;

CREATE POLICY "Enable read access for all users" ON "public"."people" FOR SELECT USING (true);

CREATE POLICY "Public profiles are viewable by everyone." ON "public"."profiles" FOR SELECT USING (true);

CREATE POLICY "Public spotlights are viewable by everyone." ON "public"."spotlights" FOR SELECT USING (true);

ALTER TABLE "public"."people" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."profiles" ENABLE ROW LEVEL SECURITY;

CREATE POLICY "profiles can insert their own profile." ON "public"."profiles" FOR INSERT WITH CHECK (("auth"."uid"() = "id"));

CREATE POLICY "profiles can update own profile." ON "public"."profiles" FOR UPDATE USING (("auth"."uid"() = "id"));

ALTER TABLE "public"."spotlights" ENABLE ROW LEVEL SECURITY;

REVOKE USAGE ON SCHEMA "public" FROM PUBLIC;
GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";

GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "anon";
GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "service_role";

GRANT ALL ON TABLE "public"."people" TO "anon";
GRANT ALL ON TABLE "public"."people" TO "authenticated";
GRANT ALL ON TABLE "public"."people" TO "service_role";

GRANT ALL ON SEQUENCE "public"."people_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."people_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."people_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."profiles" TO "anon";
GRANT ALL ON TABLE "public"."profiles" TO "authenticated";
GRANT ALL ON TABLE "public"."profiles" TO "service_role";

GRANT ALL ON SEQUENCE "public"."profiles_index_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."profiles_index_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."profiles_index_seq" TO "service_role";

GRANT ALL ON TABLE "public"."select_preview_people" TO "anon";
GRANT ALL ON TABLE "public"."select_preview_people" TO "authenticated";
GRANT ALL ON TABLE "public"."select_preview_people" TO "service_role";

GRANT ALL ON TABLE "public"."spotlights" TO "anon";
GRANT ALL ON TABLE "public"."spotlights" TO "authenticated";
GRANT ALL ON TABLE "public"."spotlights" TO "service_role";

GRANT ALL ON SEQUENCE "public"."spotlights_index_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."spotlights_index_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."spotlights_index_seq" TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";

RESET ALL;
